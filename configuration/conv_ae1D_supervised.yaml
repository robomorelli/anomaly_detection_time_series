# Dataset
dataset:
  columns: ['RW1_motcurr', 'RW2_motcurr', 'RW3_motcurr', 'RW4_motcurr',  'RW1_cmd_volt', 'RW2_cmd_volt',
            'RW3_cmd_volt', 'RW4_cmd_volt', 'RW1_therm',
            'RW2_therm', 'RW3_therm', 'RW4_therm', 'RW1_speed', 'RW2_speed',
            'RW3_speed', 'RW4_speed']
  train_val_split: 0.70
  shuffle: 0
  columns_subset: 0
  dataset_subset: 0
  batch_size: 500
  sampling_rate: '4s'
  scaled: 1

opt:
  epochs: 200
  patience: 5
  lr: 0.001
  sequence_lenght: 40

model_hyperparameters:
  name: 'conv_ae1D'
  increasing: 0
  stride: 1
  pool: 1
  kernel_size: 7
  filter_num: 110
  activation: 'Relu'
  flattened: 0
  bn: 0

    
    parser1 = argparse.ArgumentParser()
    parser1.add_argument("--architecture", default='lstm', help="[lstm, lstm_ae, lstm_vae, conv_ae, conv_ae1D")
    #dataset
    parser1.add_argument("--columns", default=columns, help="columns imported from config, [columns, columns_third_wheel]")
    parser1.add_argument("--model_path", default=model_results, help="where to save model")
    parser1.add_argument("--train_val_split", default=0.80, help="a number to specify how many feats to take from columns")
    parser1.add_argument('--shuffle', action='store_const', const=False, default=False, help='')
    parser1.add_argument("--columns_subset", default=0, help="a number to specify how many feats to take from columns")
    parser1.add_argument("--dataset_subset", default=100000, help="number of row to use from all the dataset")
    parser1.add_argument("--batch_size", default=100, help="batch size")

    parser1.add_argument("--epochs", default=50, help="ns")
    parser1.add_argument("--patience", default=5, help="ns")
    parser1.add_argument("--lr", default=0.0009, help="nus")
    parser1.add_argument("--out_window", default=5, help="sequence lenght of the output")
    parser1.add_argument("--sequence_length", default=40, help="sequence_length")

    # conv architecture (1D and 2D)
    parser1.add_argument("--n_layers", default=1, help="")
    parser1.add_argument("--increasing", default=0, help="0 or 1")
    parser1.add_argument("--stride", default=1, help="")
    parser1.add_argument("--kernel_size", default=7, help="")
    parser1.add_argument("--filter_num", default=110, help="")
    parser1.add_argument("--activation", default=nn.ELU(), help="")
    parser1.add_argument("--flattened", default=1, help="0 or 1")
    # conv architecture (1D only)
    parser1.add_argument("--pool", default=1, help="0 or 1")
    parser1.add_argument("--bn", default=1, help="0 or 1")
    # conv architecture (2D only)


    # lstm architecture
    parser1.add_argument("--embedding_dim", default=32, help="s")
    parser1.add_argument("--n_layers_1", default=1, help="")
    parser1.add_argument("--n_layers_2", default=1, help="")
    parser1.add_argument("--no_latent",  action='store_const', const=False, default=False)
    parser1.add_argument("--latent_dim", default=100, help="")

    # lstm vae architecture only
    parser1.add_argument("--N_binomial", default=1, help="number of epochs")
    parser1.add_argument("--kld", default='vanilla', help="[vanilla, custom]")


    # dataset
    parser1.add_argument("--sampling_rate", type=str, default="4s", help="[2s, 4s]")
    parser1.add_argument('--scaled', action='store_const', const=False, default=True,
                        help='')
    parser1.add_argument('--forecast_all', action='store_true',
                        help='')
    parser1.add_argument("--target", default=None, help="columns name of the target if none >>> autoencoder mode")
    args1 = parser1.parse_args()


    parser2 = argparse.ArgumentParser()
    parser2.add_argument("--data_path", type=str, default=f'./data/FIORIRE/dataset_{args1.sampling_rate}/')
    parser2.add_argument("--dataset", default=f'all_2016-2018_clean_std_{args1.sampling_rate}.pkl', help="ae")
    parser2.add_argument('--predict', action='store_true', help='')
    parser2.add_argument('--forecast', action='store_true', help='')
    parser2.add_argument('--forecast_all', action='store_true', help='')
